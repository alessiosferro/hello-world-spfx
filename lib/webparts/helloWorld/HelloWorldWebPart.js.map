{"version":3,"sources":["webparts/helloWorld/HelloWorldWebPart.ts"],"names":[],"mappings":"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","file":"webparts/helloWorld/HelloWorldWebPart.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport {Version} from '@microsoft/sp-core-library';\nimport {\n  BaseClientSideWebPart,\n  IPropertyPaneConfiguration,\n  PropertyPaneCheckbox,\n  PropertyPaneDropdown,\n  PropertyPaneDropdownOptionType,\n  PropertyPaneTextField, PropertyPaneToggle\n} from '@microsoft/sp-webpart-base';\n\nimport {\n  Environment,\n  EnvironmentType\n} from '@microsoft/sp-core-library';\n\nimport * as strings from 'HelloWorldWebPartStrings';\nimport MockHttpClient from './MockHttpClient';\nimport {\n  SPHttpClient,\n  SPHttpClientResponse\n} from '@microsoft/sp-http';\nimport HelloWorld from './components/HelloWorld';\nimport {IHelloWorldProps} from './components/IHelloWorldProps';\nimport {IHelloWorldWebPartProps, ISPList, ISPLists} from \"./HelloWorldWebPartModel\";\n\nexport default class HelloWorldWebPart extends BaseClientSideWebPart<IHelloWorldWebPartProps> {\n  public render(): void {\n    this.getList().then(ispList => {\n      const element: React.ReactElement<IHelloWorldProps> = React.createElement(\n        HelloWorld,\n        {\n          description: this.properties.description,\n          test: this.properties.test,\n          test1: this.properties.test1,\n          test2: this.properties.test2,\n          test3: this.properties.test3,\n          context: this.context.pageContext,\n          ispList\n        }\n      );\n\n      ReactDom.render(element, this.domElement);\n    });\n  }\n\n  // @ts-ignore\n  protected get dataVersion(): Version {\n    return Version.parse('1.0');\n  }\n\n  private getList(): Promise<ISPList[]> {\n    // Local environment\n    if (Environment.type === EnvironmentType.Local) {\n      return this._getMockListData().then(({value}) => value);\n    }\n\n    if ([EnvironmentType.SharePoint, EnvironmentType.ClassicSharePoint].indexOf(Environment.type) !== -1) {\n      return this._getListData().then(({value}) => value);\n    }\n  }\n\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\n    return {\n      pages: [\n        {\n          header: {\n            description: strings.PropertyPaneDescription\n          },\n          groups: [\n            {\n              groupName: strings.BasicGroupName,\n              groupFields: [\n                PropertyPaneTextField('description', {\n                  label: strings.DescriptionFieldLabel,\n                  multiline: true,\n                }),\n                PropertyPaneTextField('test', {\n                  label: 'Text field'\n                }),\n                PropertyPaneCheckbox('test1', {\n                  text: 'Checkbox'\n                }),\n                PropertyPaneDropdown('test2', {\n                  label: 'Dropdown',\n                  options: [\n                    {key: '1', text: 'One'},\n                    {key: '2', text: 'Two'},\n                    {key: '3', text: 'Three'},\n                    {type: PropertyPaneDropdownOptionType.Header, key: 'header', text: 'Header'},\n                    {type: PropertyPaneDropdownOptionType.Divider, key: 'divider', text: ''},\n                    {key: '5', text: 'Another option'}\n                  ]\n                }),\n                PropertyPaneToggle('test3', {\n                  label: 'Toggle',\n                  offText: 'Off',\n                  onText: 'On'\n                })\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  private _getMockListData(): Promise<ISPLists> {\n    return MockHttpClient.get()\n      .then((data: ISPList[]) => ({value: data})) as Promise<ISPLists>;\n  }\n\n  private _getListData(): Promise<ISPLists> {\n    return this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + `/_api/web/lists?$filter=Hidden eq false`, SPHttpClient.configurations.v1)\n      .then((response: SPHttpClientResponse) => {\n        return response.json();\n      });\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}